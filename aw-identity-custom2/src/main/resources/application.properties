spring.application.name=servicetemplate-v1
server.port=7003
server.address=localhost

spring.main.allow-bean-definition-overriding=true
spring.jpa.properties.org.hibernate.envers.default_schema=revision 


#CORS Config
anar.cors.allowed-origin=*
anar.cors.allowed-method=*
anar.cors.allowed-header=*


### Installation Config
anar.reg.client.url=https://anar.io/release-libs
anar.reg.env=qa
anar.reg.version=1.0.0
anar.reg.mdm.server.port=8080
anar.reg.logpath=../logs
anar.reg.packetstorepath=../PacketStore
anar.reg.healthcheck.url=https\://qa.anar.io/v1/authmanager/actuator/health
anar.reg.rollback.path=../BackUp
anar.reg.db.key=bW9zaXAxMjM0NQ\=\=
anar.reg.cerpath=/cer//anar_cer.cer
anar.reg.xml.file.url=https\://devops.anar.io/artifactory/libs-release/io/anar/registration/registration-client/maven-metadata.xml
anar.reg.dbpath=db/reg
anar.reg.app.key=bBQX230Wskq6XpoZ1c+Ep1D+znxfT89NxLQ7P4KFkc4\=
anar.reg.client.tpm.availability=N




# logging.config=src/main/resources/log4j2.xml

spring.profiles.active=dev
app.secret=xYxCvBN!sM

#jwt Properties
app.jwtSecret= JWTSuperSecretKey
app.jwtExpirationInMs = 604800000

app.url=http://localhost/

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/anar_test
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username= asims_user
spring.datasource.password= secret

## serialization of lazyloaded relationship causes to error when objects not loaded
spring.jackson.serialization.fail-on-empty-beans=false

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update


spring.jpa.show-sql=true

# logging
# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
# logging.level.org.hibernate.SQL=debug
# logging.level.org.springframework.web.=debug
# logging.level.org.springframework.security=debug

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2MB
# Max file size.
spring.servlet.multipart.max-file-size=30MB
# Max Request Size
spring.servlet.multipart.max-request-size=30MB

# Upload Directories
app.upload.dir = upload
# Temp Directory
app.upload.temp = upload/temp
# this directory will have the avatar of all users
# one user can be in multiple envrironments so we are not adding envSlug directory as parent
app.user.avatar = upload/avatar

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=bigdata.directorate@gmail.com
spring.mail.password=iNovation@nSIA!
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.connectiontimeout = 60000
spring.mail.properties.mail.smtp.timeout = 60000
spring.mail.properties.mail.smtp.writetimeout=5000
server.tomcat.additional-tld-skip-patterns=*.jar

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true

# SSL, post 465
# spring.mail.properties.mail.ssl.enable=true
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory


# Kafka Connect Host
kafka.connect.host=http://localhost:8083



# Google Captcha
captcha.privateKey=6LdjT88UAAAAAPZLHmfQ4oZPrW6xqrDNutHEDjDb